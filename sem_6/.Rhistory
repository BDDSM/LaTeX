getSymbols(Symbols="GOOG",from="2016-01-01",to="2016-08-08")
df <- data.frame(t=time(GOOG),coredata(GOOG))
library(knitr)                     # взаимодействие R-Latex
library(quantmod)                  # загрузка котировок с yahoo.finance, google.finance
library(ggplot2)                   # симпатявые графики
library(dplyr)
getSymbols(Symbols="GOOG",from="2016-01-01",to="2016-08-08")
df <- data.frame(t=time(GOOG),coredata(GOOG))
head(df)
df[,-c(6,7)]
head(df
)
df <- df[,-c(6,7)]
beautiful <- head(df) %>% kable()
head(df)
xtable(head(df))
ва
head(Df)
hea(df)
head(df)
model <- lm(data=df,GOOG.Open~t)
model <- lm(data=df,GOOG.Open~t+GOOG.Close)
xtable(summary(model))
library(xtable)
xtable(summary(model))
# Внимание! Считать VaR с помощью нормального распределения - это зашквар.
# Почему это зашквар следует спросить у Талеба и его Чёрного лебедя! Здесь приведён именно
# такой код, потому что он быстро работает и вам не придётся ждать тысячу лет пока пройдут вычисления.
# Подробнее смотрите здесь:  https://rpubs.com/iezepov/e502lec2
# Это цикл шикарных виньеток по эконометрике (финансовой и не только) в R на русском от Ильи Езепова.
# Меня зовут Винни и я давно хочу сделать генерацию автоматических отчётов  для своего
# начальника Пяточка. Мне сообщили, что ты можешь мне в этом помочь. Надеюсь, что эти
# заметки помогут тебе помочь мне.
# Пакеты, которые надо установить:
install.packages(c('knitr','ggplot2','ghyp','dplyr','quantmod','tseries'))
# Установить пакеты надо один раз. Но каждый раз в документе они должны подгружаться.
# Иначе расчётов не получится...
library("knitr")
library("ggplot2")
library("ghyp")
library("dplyr")
library('quantmod')
library('tseries')
# Кусок кода для выкачки данных. В табличке df будут все ценные бумаги, по которым мы считаем VaR
invisible(Sys.setlocale("LC_MESSAGES", "C"))
invisible(Sys.setlocale("LC_TIME", "C"))
getSymbols(Symbols="TSLA",from="2015-01-01",to="2017-01-01")
df <- data.frame(t=time(TSLA),coredata(TSLA))
# 1. Нельзя забывать делать для пяточка шапку. В ней должно быть написано что за отчёт делается
# и по какой компании он делается. В первом абзаце отчёта всегда должно идти пояснение что за
# показатели ниже расчитываются и каким способом. В данном отчёте расчитываются VaR, ES. Делается
# это с помощью нормального распределения. Реалистичность расчётов проверяется с
# помощью теста Купика. Всё это надо бы не забыть отразить.
# 2. Пяточёк любит картинки. Надо вставлять график динамики стоимости акций. Неплохо было
# бы подписать этот рисунок...
ggplot(df) +
geom_line(aes(x = t, y = TSLA.Open), colour = 'blue') +
xlab('Время') + ylab('Стоимость')+
ggtitle("Изменение стоимости акций Tesla")
# Этот кусок кода пяточку видеть не обязательно. Тут мы переходим к доходностям.
doh <- c()
for(i in 2:nrow(df)){
doh[i] <- (df$TSLA.Open[i]-df$TSLA.Open[i-1])/df$TSLA.Open[i-1]
}
df <- mutate(df,doh=doh)
# 3. А вот график доходностей ему показать нужно.
ggplot(df) +
geom_line(aes(x = t, y = doh), colour = 'red') +
xlab('Время') + ylab('Доходность')+
ggtitle("Изменение доходностей акций Tesla")
# 4. Этот код считает VaR для следующего периода.
sample = df$doh[-1]
# Это VaR
qnorm(0.05, mean=mean(sample), sd=sd(sample))
# 5. Надо предоставить Пяточку информацию об адекватности нашего прогноза.
# Обычно я даю ему рисунок кривой VaR, которая расчитывалась с помощью окна.
N <- 200
test <- sample[(N+1):length(sample)]
VaR <- rep(0, length(test))
for (i in (N+1):length(sample)){
train <- sample[(i-N):(i-1)]
VaR[i-N] <- qnorm(0.05, mean=mean(train), sd=sd(train))
}
t <- 1: length(test)
df <- data.frame(test=test,VaR=VaR,t=t)
ggplot(df) +
geom_line(aes(x = t, y = test), colour = 'black') +
geom_line(aes(x = t, y = VaR), colour = 'red') +
ggtitle("Кривая VaR")
# 6. Кроме самой по себе кривой VaR я также предоставляю ему табличку с информацией о тесте Купика.
# Тест Купика проверяет совпадает ли число пробитий с ожидаемым (не превышает ли число пробитий 5%).
# Доказано, что статистика Купика имеет Хи-квадрат распределение с одной степенью свободы.
# Пяточёк хотел бы, чтобы выводилась информация о p-value для теста Купика и краткое пояснение о том, что
# такое значение теста означает. Я бы не хотел вручную менять текст с "Наш прогноз хороший так как гипотеза
# о том, что число пробитий не превышает 5% не отвергается. Прогноз заверен Купиком!" в случае, когда
# pvalue > 5%. И наоборо в случае, когда <= 5%. Поэтому я хотел бы чтобы в зависимости от рассчитанного
# pvalue печатался разный текст. Это же возможно в этом вашем Luardftex?
L <- length(test)
K <- sum(test < VaR)
a0 <- K/L
a <- 0.05
S <- 2*log( (1-a0)^(L-K) * a0^K ) - 2*log( (1-a)^(L-K) * a^K )
pval <- 1 - pchisq(S, 1)
pval
# 7. Пяточку нравится слово "стационарный". Поэтому он любит видеть в конце отчёта табличку с результатами
# проверки гипотезы единичного корня.
adf.test(doh[-1])
adf.test(doh[-1])
install.packages(c("knitr", "ggplot2", "ghyp", "dplyr", "quantmod", "tseries"))
install.packages(c("knitr", "ggplot2", "ghyp", "dplyr", "quantmod", "tseries"))
install.packages(c("knitr", "ggplot2", "ghyp", "dplyr", "quantmod", "tseries"))
xtable(adf.test(doh[-1]))
library(xtable)
xtable(adf.test(doh[-1]))
library('tseries')
library("knitr")
library("ggplot2")
library("ghyp")
library("dplyr")
library('quantmod')
library('tseries')
invisible(Sys.setlocale("LC_MESSAGES", "C"))
invisible(Sys.setlocale("LC_TIME", "C"))
getSymbols(Symbols="TSLA",from="2015-01-01",to="2017-01-01")
df <- data.frame(t=time(TSLA),coredata(TSLA))
ggplot(df) +
geom_line(aes(x = t, y = TSLA.Open), colour = 'blue') +
xlab('Время') + ylab('Стоимость')+
ggtitle("Изменение стоимости акций Tesla")
doh <- c()
for(i in 2:nrow(df)){
doh[i] <- (df$TSLA.Open[i]-df$TSLA.Open[i-1])/df$TSLA.Open[i-1]
}
df <- mutate(df,doh=doh)
ggplot(df) +
geom_line(aes(x = t, y = doh), colour = 'red') +
xlab('Время') + ylab('Доходность')+
ggtitle("Изменение доходностей акций Tesla")
sample = df$doh[-1]
qnorm(0.05, mean=mean(sample), sd=sd(sample))
N <- 200
test <- sample[(N+1):length(sample)]
VaR <- rep(0, length(test))
for (i in (N+1):length(sample)){
train <- sample[(i-N):(i-1)]
VaR[i-N] <- qnorm(0.05, mean=mean(train), sd=sd(train))
}
t <- 1: length(test)
df <- data.frame(test=test,VaR=VaR,t=t)
ggplot(df) +
geom_line(aes(x = t, y = test), colour = 'black') +
geom_line(aes(x = t, y = VaR), colour = 'red') +
ggtitle("Кривая VaR")
L <- length(test)
K <- sum(test < VaR)
a0 <- K/L
a <- 0.05
S <- 2*log( (1-a0)^(L-K) * a0^K ) - 2*log( (1-a)^(L-K) * a^K )
pval <- 1 - pchisq(S, 1)
pval
adf.test(doh[-1])
xtable(adf.test(doh[-1]))
tst <- adf.test(doh[-1])
summary(tst)
tst
type(tst)
typeof(tst)
xtable(tst)
